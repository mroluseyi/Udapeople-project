version: 2.1
orbs:
  slack: circleci/slack@4.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environments ${CIRCLE_WORKFLOW_ID:0:7}"
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}

  revert-migrations:
    description: Revert the last migration
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            export SUCCESS=$(curl --insecure https://kvdb.io/${KVDB_BUCKET_ID}/migration_${CIRCLE_WORKFLOW_ID:0:7})
            echo $SUCCESS
            if (( $SUCCESS == 1 ));
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
          environment:
            API_URL: http://localhost:3030
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
          environment:
            API_URL: http://localhost:3030
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          key: frontend-build
      - run:
          name: Run frontend test
          command: |
            cd frontend
            npm install
            npm run test
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          key: backend-build
      - run:
          name: Run backend test
          command: |
            cd backend
            npm install
            npm run test   

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: frontend-build
      - run:
          name: scan frontend dependencies
          command: |
            cd frontend
            npm install 
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: backend-build
      - run:
          name: scan backend dependencies
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical   

  
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install Dependencies
          command: |
            cat .circleci/ansible/inventory.txt
            ls ~/project/.circleci/ansible/
            cat ~/project/.circleci/ansible/inventory.txt
            yum -y install tar gzip jq npm
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:project,Values=udapeople" \
            --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt

  configure-infrastructure:
    docker:
      - image: python:3.10.5-alpine3.16
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ['69:61:01:1e:b6:c2:a5:09:1b:5b:50:74:42:23:78:b6']
      - run:
          name: install required dependencies
          command: |
            apk add --update ansible curl aws-cli
      - attach_workspace:
          at: ~/

      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
          

      - destroy-environment

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install Dependencies
          command: |
            sudo apt-get install -y tar gzip curl
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip -qq awscliv2.zip
            sudo ./aws/install
      - attach_workspace:
          at: ~/
      - run: 
          name: Run Migrations
          command: |
            cd backend
            npm install
            npm run build 
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/backend
      - run:
          name: Send migration status to kvdb.io
          command: |
            if grep -q "has been executed successfully" ~/project/backend/migrations_dump.txt
            then
              curl --insecure https://kvdb.io/QGZnDjEbu3XnbpFUJevmsS/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi

      - destroy-environment
      - revert-migrations

  deploy-frontend:
    docker:
      - image: python:3.10.5-alpine3.16
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip nodejs npm ansible curl aws-cli
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters Name=tag:aws:cloudformation:stack-name,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
            --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo "API_URL=http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment
      - revert-migrations  

  deploy-backend:
    docker:
      - image: python:3.11-rc-alpine
    steps:
      - checkout

      - add_ssh_keys:
          fingerprints: ['69:61:01:1e:b6:c2:a5:09:1b:5b:50:74:42:23:78:b6']
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            ansible --version
            apk add --update nodejs
            apk add --update curl
            apk add --update npm
            apk add --update tar
            apk add --update gzip
            pip3 install awscli
            aws --version
      - run:
          name: deploy backend
          command: |
            cd backend
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> ".env"
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> ".env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> ".env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ".env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ".env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ".env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> ".env"
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> ".env"
            npm i
            npm run build
            cd ..
            pwd
            tar -C backend -cvzf artifact.tar.gz .
            cd .circleci/ansible
            echo "contents of the inventory.txt ...."
            cat inventory.txt
            export ANSIBLE_HOST_KEY_CHECKING=False
            aws --version
            ansible-playbook -i inventory.txt deploy-backend.yml
      
      

          
  smoke-test:
      docker:
        - image: python:3.11-rc-alpine
      steps:
        - checkout
        - run:
            name: Install dependencies
            command: |
              apk add --update ansible
              ansible --version
              apk add --update nodejs
              apk add --update curl
              apk add --update npm
              apk add --update tar
              apk add --update gzip
              pip3 install awscli
              aws --version
        - run:
            name: Backend smoke test.
            command: |
              export BACKEND_IP=$(aws ec2 describe-instances \
                --query 'Reservations[*].Instances[*].PublicIpAddress' \
                --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --output text)
              export API_URL="http://${BACKEND_IP}:3030"
              echo "API_URL = ${API_URL}"
              if curl "${API_URL}/api/status" | grep "ok"
              then
                echo SUCCESS
                exit 0
              else
                echo FAIL
                exit 1
              fi
        - run:
            name: Frontend smoke test.
            command: |
              URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website.${AWS_DEFAULT_REGION}.amazonaws.com/#/employees"
              echo ${URL}
              if curl -s ${URL} | grep "Welcome"
              then
                exit 0
              else
                exit 1
              fi
       # - destroy-environment
        #- revert-migrations 
           

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]    
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]   
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]    
      - configure-infrastructure:
          filters:
            branches:
              only: [master]
          requires: [deploy-infrastructure]  
      - run-migrations:
          requires: [configure-infrastructure]      
      - deploy-frontend:
          requires: [run-migrations]     
      - deploy-backend:
          requires: [run-migrations]  
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]      